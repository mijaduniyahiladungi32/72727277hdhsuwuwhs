name: Merge M3U Playlists          

on:          
  schedule:          
    - cron: "*/15 * * * *"          
  workflow_dispatch:          

jobs:          
  merge:          
    runs-on: ubuntu-latest          

    steps:          
      - name: Checkout source repository          
        uses: actions/checkout@v3          

      - name: Set up Python          
        uses: actions/setup-python@v4          
        with:          
          python-version: '3.x'          

      - name: Install dependencies          
        run: pip install requests jq          

      - name: Download External Repos          
        run: |          
          echo "Cloning source repositories..."          
          git clone --depth=1 https://${{ secrets.SOURCE_URL1 }} temp1          
          git clone --depth=1 https://${{ secrets.SOURCE_URL2 }} temp2          
          mkdir -p merged          
          cp -r temp1/*.m3u merged/ || true          
          cp -r temp1/*.m3u8 merged/ || true          
          cp -r temp2/*.m3u merged/ || true          
          cp -r temp2/*.m3u8 merged/ || true          
          cp -r ./*.m3u merged/ || true          
          cp -r ./*.m3u8 merged/ || true          

          # Download new external playlist      
          echo "Downloading external playlist (playlist New)..."          
          curl -L "${{ secrets.External_source }}" -o merged/New-Best.m3u          

      - name: Parse JSON config and download Join playlists
        run: |
          mkdir -p merged/join

          # Safely parse secret JSON even if it has escaped quotes
          echo "${{ secrets.PLAYLIST_CONFIG_JSON }}" | jq --raw-input --slurp 'fromjson' > config.json

          # Build Skip list
          jq -r '.Skip[].file' config.json > skip.txt

          # Download Join playlists
          jq -c '.Join[]' config.json | while read item; do
            name=$(echo "$item" | jq -r '.Name')
            url=$(echo "$item" | jq -r '.Url')
            change=$(echo "$item" | jq -r '."group name change"')
            
            file="merged/join/$(basename "$url")"
            curl -L "$url" -o "$file"
            
            # Store metadata for merging
            echo "$change" > "$file.change"
            echo "$name" > "$file.name"
          done

      - name: Merge Playlists          
        run: |          
          echo "#EXTM3U" > All-playlist.m3u
          
          # Merge normal files first
          for f in merged/*.m3u merged/*.m3u8; do
            [ -f "$f" ] || continue
            fname=$(basename "$f")
            
            # Skip if in Skip list
            if grep -qx "$fname" skip.txt; then
              echo "Skipping $fname"
              continue
            fi
            
            # New-Best.m3u: append as-is
            if [ "$fname" = "New-Best.m3u" ]; then
              awk 'NR>1 {print}' "$f" >> All-playlist.m3u
              continue
            fi
            
            fname_noext="${fname%.*}"
            
            # Default handling
            awk -v fname="$fname_noext" '
              /^#EXTINF/ {
                if (match($0, /group-title="[^"]*"/)) {
                  oldgroup = substr($0, RSTART+13, RLENGTH-14)
                  sub(/group-title="[^"]*"/, "group-title=\"" fname " | " oldgroup "\"")
                  print
                } else {
                  sub(/^#EXTINF:/, "#EXTINF: group-title=\"" fname "\" ,")
                  print
                }
                next
              }
              { print }
            ' "$f" >> All-playlist.m3u
          done
          
          # Merge Join playlists
          for f in merged/join/*; do
            [ -f "$f" ] || continue
            change=$(cat "$f.change")
            joinname=$(cat "$f.name")
            
            if [ "$change" = "yes" ]; then
              awk -v fname="$joinname" '
                /^#EXTINF/ {
                  if (match($0, /group-title="[^"]*"/)) {
                    oldgroup = substr($0, RSTART+13, RLENGTH-14)
                    sub(/group-title="[^"]*"/, "group-title=\"" fname " | " oldgroup "\"")
                    print
                  } else {
                    sub(/^#EXTINF:/, "#EXTINF: group-title=\"" fname "\" ,")
                    print
                  }
                  next
                }
                { print }
              ' "$f" >> All-playlist.m3u
            else
              # append as-is
              awk 'NR>1 {print}' "$f" >> All-playlist.m3u
            fi
          done

      - name: Clone target private repository          
        run: |          
          git clone https://x-access-token:${{ secrets.TARGET_TOKEN2 }}@${{ secrets.TARGET_URL }} ${{ secrets.TARGET_NAME }}          

      - name: Copy playlist to target repository          
        run: cp All-playlist.m3u ${{ secrets.TARGET_NAME }}/All-playlist.m3u          

      - name: Commit & push to target repository          
        run: |          
          cd ${{ secrets.TARGET_NAME }}          
          git config user.name "${{ secrets.TARGET_REPO_USER }}"          
          git config user.email "${{ secrets.TARGET_REPO_USER }}@users.noreply.github.com"          
          git add All-playlist.m3u          
          git commit -m "ðŸ”„ Auto update playlist on $(date '+%Y-%m-%d %H:%M:%S')" || echo "No changes to commit"          
          git push
